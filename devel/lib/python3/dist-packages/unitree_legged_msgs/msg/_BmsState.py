# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from unitree_legged_msgs/BmsState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BmsState(genpy.Message):
  _md5sum = "8e007c660c590388bca7c2464d80df54"
  _type = "unitree_legged_msgs/BmsState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 version_h
uint8 version_l
uint8 bms_status
uint8 SOC                  # SOC 0-100%
int32 current              # mA
uint16 cycle
int8[2] BQ_NTC             # x1 degrees centigrade
int8[2] MCU_NTC            # x1 degrees centigrade
uint16[10] cell_vol        # cell voltage mV"""
  __slots__ = ['version_h','version_l','bms_status','SOC','current','cycle','BQ_NTC','MCU_NTC','cell_vol']
  _slot_types = ['uint8','uint8','uint8','uint8','int32','uint16','int8[2]','int8[2]','uint16[10]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       version_h,version_l,bms_status,SOC,current,cycle,BQ_NTC,MCU_NTC,cell_vol

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BmsState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.version_h is None:
        self.version_h = 0
      if self.version_l is None:
        self.version_l = 0
      if self.bms_status is None:
        self.bms_status = 0
      if self.SOC is None:
        self.SOC = 0
      if self.current is None:
        self.current = 0
      if self.cycle is None:
        self.cycle = 0
      if self.BQ_NTC is None:
        self.BQ_NTC = [0] * 2
      if self.MCU_NTC is None:
        self.MCU_NTC = [0] * 2
      if self.cell_vol is None:
        self.cell_vol = [0] * 10
    else:
      self.version_h = 0
      self.version_l = 0
      self.bms_status = 0
      self.SOC = 0
      self.current = 0
      self.cycle = 0
      self.BQ_NTC = [0] * 2
      self.MCU_NTC = [0] * 2
      self.cell_vol = [0] * 10

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4BiH().pack(_x.version_h, _x.version_l, _x.bms_status, _x.SOC, _x.current, _x.cycle))
      buff.write(_get_struct_2b().pack(*self.BQ_NTC))
      buff.write(_get_struct_2b().pack(*self.MCU_NTC))
      buff.write(_get_struct_10H().pack(*self.cell_vol))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.version_h, _x.version_l, _x.bms_status, _x.SOC, _x.current, _x.cycle,) = _get_struct_4BiH().unpack(str[start:end])
      start = end
      end += 2
      self.BQ_NTC = _get_struct_2b().unpack(str[start:end])
      start = end
      end += 2
      self.MCU_NTC = _get_struct_2b().unpack(str[start:end])
      start = end
      end += 20
      self.cell_vol = _get_struct_10H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4BiH().pack(_x.version_h, _x.version_l, _x.bms_status, _x.SOC, _x.current, _x.cycle))
      buff.write(self.BQ_NTC.tostring())
      buff.write(self.MCU_NTC.tostring())
      buff.write(self.cell_vol.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.version_h, _x.version_l, _x.bms_status, _x.SOC, _x.current, _x.cycle,) = _get_struct_4BiH().unpack(str[start:end])
      start = end
      end += 2
      self.BQ_NTC = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=2)
      start = end
      end += 2
      self.MCU_NTC = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=2)
      start = end
      end += 20
      self.cell_vol = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=10)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10H = None
def _get_struct_10H():
    global _struct_10H
    if _struct_10H is None:
        _struct_10H = struct.Struct("<10H")
    return _struct_10H
_struct_2b = None
def _get_struct_2b():
    global _struct_2b
    if _struct_2b is None:
        _struct_2b = struct.Struct("<2b")
    return _struct_2b
_struct_4BiH = None
def _get_struct_4BiH():
    global _struct_4BiH
    if _struct_4BiH is None:
        _struct_4BiH = struct.Struct("<4BiH")
    return _struct_4BiH
