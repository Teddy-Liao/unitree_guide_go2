// Generated by gencpp from file unitree_legged_msgs/BmsState.msg
// DO NOT EDIT!


#ifndef UNITREE_LEGGED_MSGS_MESSAGE_BMSSTATE_H
#define UNITREE_LEGGED_MSGS_MESSAGE_BMSSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unitree_legged_msgs
{
template <class ContainerAllocator>
struct BmsState_
{
  typedef BmsState_<ContainerAllocator> Type;

  BmsState_()
    : version_h(0)
    , version_l(0)
    , bms_status(0)
    , SOC(0)
    , current(0)
    , cycle(0)
    , BQ_NTC()
    , MCU_NTC()
    , cell_vol()  {
      BQ_NTC.assign(0);

      MCU_NTC.assign(0);

      cell_vol.assign(0);
  }
  BmsState_(const ContainerAllocator& _alloc)
    : version_h(0)
    , version_l(0)
    , bms_status(0)
    , SOC(0)
    , current(0)
    , cycle(0)
    , BQ_NTC()
    , MCU_NTC()
    , cell_vol()  {
  (void)_alloc;
      BQ_NTC.assign(0);

      MCU_NTC.assign(0);

      cell_vol.assign(0);
  }



   typedef uint8_t _version_h_type;
  _version_h_type version_h;

   typedef uint8_t _version_l_type;
  _version_l_type version_l;

   typedef uint8_t _bms_status_type;
  _bms_status_type bms_status;

   typedef uint8_t _SOC_type;
  _SOC_type SOC;

   typedef int32_t _current_type;
  _current_type current;

   typedef uint16_t _cycle_type;
  _cycle_type cycle;

   typedef boost::array<int8_t, 2>  _BQ_NTC_type;
  _BQ_NTC_type BQ_NTC;

   typedef boost::array<int8_t, 2>  _MCU_NTC_type;
  _MCU_NTC_type MCU_NTC;

   typedef boost::array<uint16_t, 10>  _cell_vol_type;
  _cell_vol_type cell_vol;





  typedef boost::shared_ptr< ::unitree_legged_msgs::BmsState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_legged_msgs::BmsState_<ContainerAllocator> const> ConstPtr;

}; // struct BmsState_

typedef ::unitree_legged_msgs::BmsState_<std::allocator<void> > BmsState;

typedef boost::shared_ptr< ::unitree_legged_msgs::BmsState > BmsStatePtr;
typedef boost::shared_ptr< ::unitree_legged_msgs::BmsState const> BmsStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_legged_msgs::BmsState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_legged_msgs::BmsState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_legged_msgs::BmsState_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::BmsState_<ContainerAllocator2> & rhs)
{
  return lhs.version_h == rhs.version_h &&
    lhs.version_l == rhs.version_l &&
    lhs.bms_status == rhs.bms_status &&
    lhs.SOC == rhs.SOC &&
    lhs.current == rhs.current &&
    lhs.cycle == rhs.cycle &&
    lhs.BQ_NTC == rhs.BQ_NTC &&
    lhs.MCU_NTC == rhs.MCU_NTC &&
    lhs.cell_vol == rhs.cell_vol;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_legged_msgs::BmsState_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::BmsState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_legged_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::BmsState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::BmsState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::BmsState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::BmsState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::BmsState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::BmsState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_legged_msgs::BmsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e007c660c590388bca7c2464d80df54";
  }

  static const char* value(const ::unitree_legged_msgs::BmsState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e007c660c590388ULL;
  static const uint64_t static_value2 = 0xbca7c2464d80df54ULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_legged_msgs::BmsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_legged_msgs/BmsState";
  }

  static const char* value(const ::unitree_legged_msgs::BmsState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_legged_msgs::BmsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 version_h\n"
"uint8 version_l\n"
"uint8 bms_status\n"
"uint8 SOC                  # SOC 0-100%\n"
"int32 current              # mA\n"
"uint16 cycle\n"
"int8[2] BQ_NTC             # x1 degrees centigrade\n"
"int8[2] MCU_NTC            # x1 degrees centigrade\n"
"uint16[10] cell_vol        # cell voltage mV\n"
;
  }

  static const char* value(const ::unitree_legged_msgs::BmsState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_legged_msgs::BmsState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.version_h);
      stream.next(m.version_l);
      stream.next(m.bms_status);
      stream.next(m.SOC);
      stream.next(m.current);
      stream.next(m.cycle);
      stream.next(m.BQ_NTC);
      stream.next(m.MCU_NTC);
      stream.next(m.cell_vol);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BmsState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_legged_msgs::BmsState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_legged_msgs::BmsState_<ContainerAllocator>& v)
  {
    s << indent << "version_h: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.version_h);
    s << indent << "version_l: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.version_l);
    s << indent << "bms_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bms_status);
    s << indent << "SOC: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SOC);
    s << indent << "current: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current);
    s << indent << "cycle: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.cycle);
    s << indent << "BQ_NTC[]" << std::endl;
    for (size_t i = 0; i < v.BQ_NTC.size(); ++i)
    {
      s << indent << "  BQ_NTC[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.BQ_NTC[i]);
    }
    s << indent << "MCU_NTC[]" << std::endl;
    for (size_t i = 0; i < v.MCU_NTC.size(); ++i)
    {
      s << indent << "  MCU_NTC[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.MCU_NTC[i]);
    }
    s << indent << "cell_vol[]" << std::endl;
    for (size_t i = 0; i < v.cell_vol.size(); ++i)
    {
      s << indent << "  cell_vol[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.cell_vol[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_LEGGED_MSGS_MESSAGE_BMSSTATE_H
