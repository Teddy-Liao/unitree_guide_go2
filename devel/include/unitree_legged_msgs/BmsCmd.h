// Generated by gencpp from file unitree_legged_msgs/BmsCmd.msg
// DO NOT EDIT!


#ifndef UNITREE_LEGGED_MSGS_MESSAGE_BMSCMD_H
#define UNITREE_LEGGED_MSGS_MESSAGE_BMSCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unitree_legged_msgs
{
template <class ContainerAllocator>
struct BmsCmd_
{
  typedef BmsCmd_<ContainerAllocator> Type;

  BmsCmd_()
    : off(0)
    , reserve()  {
      reserve.assign(0);
  }
  BmsCmd_(const ContainerAllocator& _alloc)
    : off(0)
    , reserve()  {
  (void)_alloc;
      reserve.assign(0);
  }



   typedef uint8_t _off_type;
  _off_type off;

   typedef boost::array<uint8_t, 3>  _reserve_type;
  _reserve_type reserve;





  typedef boost::shared_ptr< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> const> ConstPtr;

}; // struct BmsCmd_

typedef ::unitree_legged_msgs::BmsCmd_<std::allocator<void> > BmsCmd;

typedef boost::shared_ptr< ::unitree_legged_msgs::BmsCmd > BmsCmdPtr;
typedef boost::shared_ptr< ::unitree_legged_msgs::BmsCmd const> BmsCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_legged_msgs::BmsCmd_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::BmsCmd_<ContainerAllocator2> & rhs)
{
  return lhs.off == rhs.off &&
    lhs.reserve == rhs.reserve;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_legged_msgs::BmsCmd_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::BmsCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_legged_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c09195f3200bd8917201f8805a3fe1d1";
  }

  static const char* value(const ::unitree_legged_msgs::BmsCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc09195f3200bd891ULL;
  static const uint64_t static_value2 = 0x7201f8805a3fe1d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_legged_msgs/BmsCmd";
  }

  static const char* value(const ::unitree_legged_msgs::BmsCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 off            # off 0xA5\n"
"uint8[3] reserve\n"
;
  }

  static const char* value(const ::unitree_legged_msgs::BmsCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.off);
      stream.next(m.reserve);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BmsCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_legged_msgs::BmsCmd_<ContainerAllocator>& v)
  {
    s << indent << "off: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.off);
    s << indent << "reserve[]" << std::endl;
    for (size_t i = 0; i < v.reserve.size(); ++i)
    {
      s << indent << "  reserve[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.reserve[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_LEGGED_MSGS_MESSAGE_BMSCMD_H
