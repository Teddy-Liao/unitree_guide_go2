// Generated by gencpp from file unitree_legged_msgs/LowCmd.msg
// DO NOT EDIT!


#ifndef UNITREE_LEGGED_MSGS_MESSAGE_LOWCMD_H
#define UNITREE_LEGGED_MSGS_MESSAGE_LOWCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <unitree_legged_msgs/MotorCmd.h>
#include <unitree_legged_msgs/BmsCmd.h>

namespace unitree_legged_msgs
{
template <class ContainerAllocator>
struct LowCmd_
{
  typedef LowCmd_<ContainerAllocator> Type;

  LowCmd_()
    : head()
    , levelFlag(0)
    , frameReserve(0)
    , SN()
    , version()
    , bandWidth(0)
    , motorCmd()
    , bms()
    , wirelessRemote()
    , reserve(0)
    , crc(0)  {
      head.assign(0);

      SN.assign(0);

      version.assign(0);

      wirelessRemote.assign(0);
  }
  LowCmd_(const ContainerAllocator& _alloc)
    : head()
    , levelFlag(0)
    , frameReserve(0)
    , SN()
    , version()
    , bandWidth(0)
    , motorCmd()
    , bms(_alloc)
    , wirelessRemote()
    , reserve(0)
    , crc(0)  {
  (void)_alloc;
      head.assign(0);

      SN.assign(0);

      version.assign(0);

      motorCmd.assign( ::unitree_legged_msgs::MotorCmd_<ContainerAllocator> (_alloc));

      wirelessRemote.assign(0);
  }



   typedef boost::array<uint8_t, 2>  _head_type;
  _head_type head;

   typedef uint8_t _levelFlag_type;
  _levelFlag_type levelFlag;

   typedef uint8_t _frameReserve_type;
  _frameReserve_type frameReserve;

   typedef boost::array<uint32_t, 2>  _SN_type;
  _SN_type SN;

   typedef boost::array<uint32_t, 2>  _version_type;
  _version_type version;

   typedef uint16_t _bandWidth_type;
  _bandWidth_type bandWidth;

   typedef boost::array< ::unitree_legged_msgs::MotorCmd_<ContainerAllocator> , 20>  _motorCmd_type;
  _motorCmd_type motorCmd;

   typedef  ::unitree_legged_msgs::BmsCmd_<ContainerAllocator>  _bms_type;
  _bms_type bms;

   typedef boost::array<uint8_t, 40>  _wirelessRemote_type;
  _wirelessRemote_type wirelessRemote;

   typedef uint32_t _reserve_type;
  _reserve_type reserve;

   typedef uint32_t _crc_type;
  _crc_type crc;





  typedef boost::shared_ptr< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> const> ConstPtr;

}; // struct LowCmd_

typedef ::unitree_legged_msgs::LowCmd_<std::allocator<void> > LowCmd;

typedef boost::shared_ptr< ::unitree_legged_msgs::LowCmd > LowCmdPtr;
typedef boost::shared_ptr< ::unitree_legged_msgs::LowCmd const> LowCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_legged_msgs::LowCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_legged_msgs::LowCmd_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::LowCmd_<ContainerAllocator2> & rhs)
{
  return lhs.head == rhs.head &&
    lhs.levelFlag == rhs.levelFlag &&
    lhs.frameReserve == rhs.frameReserve &&
    lhs.SN == rhs.SN &&
    lhs.version == rhs.version &&
    lhs.bandWidth == rhs.bandWidth &&
    lhs.motorCmd == rhs.motorCmd &&
    lhs.bms == rhs.bms &&
    lhs.wirelessRemote == rhs.wirelessRemote &&
    lhs.reserve == rhs.reserve &&
    lhs.crc == rhs.crc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_legged_msgs::LowCmd_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::LowCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_legged_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a33b01032a894134df9b65b5cd356d1";
  }

  static const char* value(const ::unitree_legged_msgs::LowCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a33b01032a89413ULL;
  static const uint64_t static_value2 = 0x4df9b65b5cd356d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_legged_msgs/LowCmd";
  }

  static const char* value(const ::unitree_legged_msgs::LowCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint8[2] head\n"
"uint8 levelFlag\n"
"uint8 frameReserve\n"
"\n"
"uint32[2] SN\n"
"uint32[2] version\n"
"uint16 bandWidth\n"
"MotorCmd[20] motorCmd\n"
"BmsCmd bms\n"
"uint8[40] wirelessRemote\n"
"uint32 reserve\n"
"\n"
"uint32 crc\n"
"================================================================================\n"
"MSG: unitree_legged_msgs/MotorCmd\n"
"uint8 mode           # motor target mode\n"
"float32 q            # motor target position\n"
"float32 dq           # motor target velocity\n"
"float32 tau          # motor target torque\n"
"float32 Kp           # motor spring stiffness coefficient\n"
"float32 Kd           # motor damper coefficient\n"
"uint32[3] reserve    # motor target torque\n"
"================================================================================\n"
"MSG: unitree_legged_msgs/BmsCmd\n"
"uint8 off            # off 0xA5\n"
"uint8[3] reserve\n"
;
  }

  static const char* value(const ::unitree_legged_msgs::LowCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.head);
      stream.next(m.levelFlag);
      stream.next(m.frameReserve);
      stream.next(m.SN);
      stream.next(m.version);
      stream.next(m.bandWidth);
      stream.next(m.motorCmd);
      stream.next(m.bms);
      stream.next(m.wirelessRemote);
      stream.next(m.reserve);
      stream.next(m.crc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LowCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_legged_msgs::LowCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_legged_msgs::LowCmd_<ContainerAllocator>& v)
  {
    s << indent << "head[]" << std::endl;
    for (size_t i = 0; i < v.head.size(); ++i)
    {
      s << indent << "  head[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.head[i]);
    }
    s << indent << "levelFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.levelFlag);
    s << indent << "frameReserve: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frameReserve);
    s << indent << "SN[]" << std::endl;
    for (size_t i = 0; i < v.SN.size(); ++i)
    {
      s << indent << "  SN[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.SN[i]);
    }
    s << indent << "version[]" << std::endl;
    for (size_t i = 0; i < v.version.size(); ++i)
    {
      s << indent << "  version[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.version[i]);
    }
    s << indent << "bandWidth: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.bandWidth);
    s << indent << "motorCmd[]" << std::endl;
    for (size_t i = 0; i < v.motorCmd.size(); ++i)
    {
      s << indent << "  motorCmd[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::unitree_legged_msgs::MotorCmd_<ContainerAllocator> >::stream(s, indent + "    ", v.motorCmd[i]);
    }
    s << indent << "bms: ";
    s << std::endl;
    Printer< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> >::stream(s, indent + "  ", v.bms);
    s << indent << "wirelessRemote[]" << std::endl;
    for (size_t i = 0; i < v.wirelessRemote.size(); ++i)
    {
      s << indent << "  wirelessRemote[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.wirelessRemote[i]);
    }
    s << indent << "reserve: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reserve);
    s << indent << "crc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.crc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_LEGGED_MSGS_MESSAGE_LOWCMD_H
